name: Build, Test, Push, and Deploy (Production Ready)

# Kích hoạt workflow khi có push lên nhánh 'main'
on:
  push:
    branches:
      - main 

env:
  # Tên tài nguyên Terraform của bạn
  ACR_NAME: "acruitgoprod"
  AKS_CLUSTER_NAME: "aks-uitgo-prod"
  RESOURCE_GROUP_NAME: "rg-uitgo-prod"
  COSMOS_DB_NAME: "cosmos-uitgo-prod"
  POSTGRES_SERVER_NAME: "psql-uitgo-prod"
  REDIS_CACHE_NAME: "redis-uitgo-prod"

jobs:
  # ----------------------------------------------
  #  GIAI ĐOẠN 1: TEST (Unit Test)
  # ----------------------------------------------
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        # Cài đặt các thư viện cần thiết cho Unit Test
        pip install -r tests/requirements.txt
        # Cài thêm các thư viện mà code của bạn dùng (nếu test cần)
        pip install fastapi uvicorn pydantic python-dotenv "passlib[bcrypt]"

    - name: Run unit tests
      run: |
        # Giả sử các file test của bạn nằm trong thư mục tests/
        # Bỏ qua file smoke_test.py (vì đây là integration test)
        pytest tests/ --deselect tests/smoke_test.py
      continue-on-error: false # Dừng lại nếu test fail

  # ----------------------------------------------
  #  GIAI ĐOẠN 2: BUILD (CI)
  # ----------------------------------------------
  build:
    runs-on: ubuntu-latest
    needs: test # Phải chờ 'test' thành công
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # --- SỬA LỖI ĐĂNG NHẬP ACR ---
    - name: Log in to ACR (Dùng az acr login)
      run: |
        az acr login --name ${{ env.ACR_NAME }}
        
    - name: Build and push (LocationService)
      run: |
        docker build ./LocationService -t ${{ env.ACR_NAME }}.azurecr.io/locationservice:${{ github.sha }}
        docker push ${{ env.ACR_NAME }}.azurecr.io/locationservice:${{ github.sha }}

    - name: Build and push (TripService)
      run: |
        docker build ./TripService -t ${{ env.ACR_NAME }}.azurecr.io/tripservice:${{ github.sha }}
        docker push ${{ env.ACR_NAME }}.azurecr.io/tripservice:${{ github.sha }}

    - name: Build and push (DriverService)
      run: |
        docker build ./DriverService -t ${{ env.ACR_NAME }}.azurecr.io/driverservice:${{ github.sha }}
        docker push ${{ env.ACR_NAME }}.azurecr.io/driverservice:${{ github.sha }}

    - name: Build and push (PaymentService)
      run: |
        docker build ./PaymentService -t ${{ env.ACR_NAME }}.azurecr.io/paymentservice:${{ github.sha }}
        docker push ${{ env.ACR_NAME }}.azurecr.io/paymentservice:${{ github.sha }}

    - name: Build and push (UserService)
      run: |
        docker build ./UserService -t ${{ env.ACR_NAME }}.azurecr.io/userservice:${{ github.sha }}
        docker push ${{ env.ACR_NAME }}.azurecr.io/userservice:${{ github.sha }}

  # ----------------------------------------------
  #  GIAI ĐOẠN 3: DEPLOY (CD)
  # ----------------------------------------------
  deploy:
    runs-on: ubuntu-latest
    needs: build # Phải chờ 'build' xong
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set AKS context (Kết nối kubectl)
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ env.RESOURCE_GROUP_NAME }}
        cluster-name: ${{ env.AKS_CLUSTER_NAME }}

    # --- LẤY CHUỖI KẾT NỐI TỪ AZURE ---
    - name: Get Azure Service Connection Strings
      id: azure-keys # Đặt ID để các bước sau gọi
      run: |
        # Lấy Connection String của CosmosDB (Mongo)
        COSMOS_CS=$(az cosmosdb keys list --name ${{ env.COSMOS_DB_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} --type connection-strings --query "connectionStrings[0].connectionString" -o tsv)
        
        # Lấy Host và Key của Redis
        REDIS_HOST=$(az redis show --name ${{ env.REDIS_CACHE_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query "hostName" -o tsv)
        REDIS_KEY=$(az redis list-keys --name ${{ env.REDIS_CACHE_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query "primaryKey" -o tsv)
        
        # Lấy thông tin Postgres (Host và User là cố định)
        POSTGRES_HOST="${{ env.POSTGRES_SERVER_NAME }}.postgres.database.azure.com"
        POSTGRES_USER="postgresadmin"

        # Đặt các giá trị này làm output (SỬ DỤNG CÚ PHÁP MỚI)
        echo "COSMOS_CONNECTION_STRING=$COSMOS_CS" >> $GITHUB_OUTPUT
        echo "REDIS_HOST=$REDIS_HOST" >> $GITHUB_OUTPUT
        echo "REDIS_KEY=$REDIS_KEY" >> $GITHUB_OUTPUT
        echo "POSTGRES_HOST=$POSTGRES_HOST" >> $GITHUB_OUTPUT
        echo "POSTGRES_USER=$POSTGRES_USER" >> $GITHUB_OUTPUT

    # --- TẠO K8S SECRETS ---
    - name: Create K8s Secrets
      env:
        # Lấy output từ bước 'azure-keys'
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }} # Lấy từ GitHub Secret
        COSMOS_CONNECTION_STRING: ${{ steps.azure-keys.outputs.COSMOS_CONNECTION_STRING }}
        REDIS_HOST: ${{ steps.azure-keys.outputs.REDIS_HOST }}
        REDIS_KEY: ${{ steps.azure-keys.outputs.REDIS_KEY }}
        POSTGRES_HOST: ${{ steps.azure-keys.outputs.POSTGRES_HOST }}
        POSTGRES_USER: ${{ steps.azure-keys.outputs.POSTGRES_USER }}
        
        # Lấy các secret khác từ GitHub Secrets
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        MAPBOX_ACCESS_TOKEN: ${{ secrets.MAPBOX_ACCESS_TOKEN }}
        TRIPSVC_CLIENT_ID: ${{ secrets.TRIPSVC_CLIENT_ID }}
        TRIPSVC_CLIENT_SECRET: ${{ secrets.TRIPSVC_CLIENT_SECRET }}
        USER_SERVICE_BASE_URL: ${{ secrets.USER_SERVICE_BASE_URL }}
        VNP_TMN_CODE: ${{ secrets.VNP_TMN_CODE }}
        VNP_HASH_SECRET: ${{ secrets.VNP_HASH_SECRET }}
        VNP_URL: ${{ secrets.VNP_URL }}
      run: |
        kubectl create secret generic uitgo-secrets --dry-run=client -o yaml \
          --from-literal=DB_PASSWORD=$DB_PASSWORD \
          --from-literal=COSMOS_CONNECTION_STRING=$COSMOS_CONNECTION_STRING \
          --from-literal=REDIS_HOST=$REDIS_HOST \
          --from-literal=REDIS_KEY=$REDIS_KEY \
          --from-literal=POSTGRES_HOST=$POSTGRES_HOST \
          --from-literal=POSTGRES_USER=$POSTGRES_USER \
          --from-literal=JWT_SECRET_KEY=$JWT_SECRET_KEY \
          --from-literal=MAPBOX_ACCESS_TOKEN=$MAPBOX_ACCESS_TOKEN \
          --from-literal=TRIPSVC_CLIENT_ID=$TRIPSVC_CLIENT_ID \
          --from-literal=TRIPSVC_CLIENT_SECRET=$TRIPSVC_CLIENT_SECRET \
          --from-literal=USER_SERVICE_BASE_URL=$USER_SERVICE_BASE_URL \
          --from-literal=VNP_TMN_CODE=$VNP_TMN_CODE \
          --from-literal=VNP_HASH_SECRET=$VNP_HASH_SECRET \
          --from-literal=VNP_URL=$VNP_URL \
        | kubectl apply -f -

    # --- CẬP NHẬT TAG IMAGE MỚI ---
    - name: Update K8s manifests with new image tag
      run: |
        sed -i 's|image: ${{ env.ACR_NAME }}.azurecr.io/locationservice:.*|image: ${{ env.ACR_NAME }}.azurecr.io/locationservice:${{ github.sha }}|g' k8s/locationservice.yaml
        sed -i 's|image: ${{ env.ACR_NAME }}.azurecr.io/tripservice:.*|image: ${{ env.ACR_NAME }}.azurecr.io/tripservice:${{ github.sha }}|g' k8s/tripservice.yaml
        sed -i 's|image: ${{ env.ACR_NAME }}.azurecr.io/driverservice:.*|image: ${{ env.ACR_NAME }}.azurecr.io/driverservice:${{ github.sha }}|g' k8s/driverservice.yaml
        sed -i 's|image: ${{ env.ACR_NAME }}.azurecr.io/paymentservice:.*|image: ${{ env.ACR_NAME }}.azurecr.io/paymentservice:${{ github.sha }}|g' k8s/paymentservice.yaml
        sed -i 's|image: ${{ env.ACR_NAME }}.azurecr.io/userservice:.*|image: ${{ env.ACR_NAME }}.azurecr.io/userservice:${{ github.sha }}|g' k8s/userservice.yaml

    # --- DEPLOY 5 FILE .YAML CỦA ỨNG DỤNG (ĐÃ SỬA LỖI) ---
    - name: Deploy all K8s manifests
      run: |
        # Chỉ áp dụng 5 file service, bỏ qua các file rác
        kubectl apply -f k8s/locationservice.yaml
        kubectl apply -f k8s/tripservice.yaml
        kubectl apply -f k8s/driverservice.yaml
        kubectl apply -f k8s/paymentservice.yaml
        kubectl apply -f k8s/userservice.yaml

  # ----------------------------------------------
  #  GIAI ĐOẠN 4: SMOKE TEST
  # ----------------------------------------------
  smoke_test:
    runs-on: ubuntu-latest
    needs: deploy # Phải chờ 'deploy' xong
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ env.RESOURCE_GROUP_NAME }}
        cluster-name: ${{ env.AKS_CLUSTER_NAME }}
        
    # --- SỬA LỖI TIMEOUT ---
    - name: Get Load Balancer IP (Chờ tối đa 5 phút)
      id: lb-ip
      run: |
        echo "Waiting for Load Balancer IP..."
        start_time=$(date +%s)
        while true; do
          IP=$(kubectl get service userservice -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          
          # Kiểm tra xem IP đã có giá trị chưa (không rỗng và không phải <none>)
          if [ -n "$IP" ] && [ "$IP" != "<none>" ]; then
            echo "Load Balancer IP: $IP"
            echo "API_URL=http://$IP" >> $GITHUB_OUTPUT
            break
          fi
          
          current_time=$(date +%s)
          elapsed=$((current_time - start_time))
          
          if [ $elapsed -gt 300 ]; then # 5 phút timeout
            echo "::error::Timeout: Không thể lấy IP của Load Balancer sau 5 phút."
            exit 1
          fi
          
          echo "IP still <pending>, waiting 15 seconds..."
          sleep 15
        done
        
    - name: Install test dependencies
      run: |
        pip install -r tests/requirements.txt
        
    - name: Run smoke tests
      env:
        # "Bơm" IP public vừa lấy được vào file smoke test
        API_URL: ${{ steps.lb-ip.outputs.API_URL }}
      run: |
        python tests/smoke_test.py

